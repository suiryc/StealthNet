// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package perso.stealthnet.webcache
    
/**
usage:
val obj = scalaxb.fromXML[perso.stealthnet.webcache.Foo](node)
val document = scalaxb.toXML[perso.stealthnet.webcache.Foo](obj, "foo", perso.stealthnet.webcache.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://rshare.de/rshare.asmx",
    Some("tns") -> "http://rshare.de/rshare.asmx",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val WebcacheAddPeerFormat: scalaxb.XMLFormat[perso.stealthnet.webcache.AddPeer] = new DefaultWebcacheAddPeerFormat {}
  implicit lazy val WebcacheAddPeerResponseFormat: scalaxb.XMLFormat[perso.stealthnet.webcache.AddPeerResponse] = new DefaultWebcacheAddPeerResponseFormat {}
  implicit lazy val WebcacheGetPeerFormat: scalaxb.XMLFormat[perso.stealthnet.webcache.GetPeer] = new DefaultWebcacheGetPeerFormat {}
  implicit lazy val WebcacheGetPeerResponseFormat: scalaxb.XMLFormat[perso.stealthnet.webcache.GetPeerResponse] = new DefaultWebcacheGetPeerResponseFormat {}
  implicit lazy val WebcacheRemovePeerFormat: scalaxb.XMLFormat[perso.stealthnet.webcache.RemovePeer] = new DefaultWebcacheRemovePeerFormat {}
  implicit lazy val WebcacheRemovePeerResponseFormat: scalaxb.XMLFormat[perso.stealthnet.webcache.RemovePeerResponse] = new DefaultWebcacheRemovePeerResponseFormat {}

  trait DefaultWebcacheAddPeerFormat extends scalaxb.ElemNameParser[perso.stealthnet.webcache.AddPeer] {
    val targetNamespace: Option[String] = Some("http://rshare.de/rshare.asmx")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[perso.stealthnet.webcache.AddPeer] =
      phrase((scalaxb.ElemName(Some("http://rshare.de/rshare.asmx"), "port")) ^^
      { case p1 =>
      perso.stealthnet.webcache.AddPeer(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: perso.stealthnet.webcache.AddPeer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Int](__obj.port, Some("http://rshare.de/rshare.asmx"), Some("port"), __scope, false))
  }
  trait DefaultWebcacheAddPeerResponseFormat extends scalaxb.XMLFormat[perso.stealthnet.webcache.AddPeerResponse] with scalaxb.CanWriteChildNodes[perso.stealthnet.webcache.AddPeerResponse] {
    val targetNamespace: Option[String] = Some("http://rshare.de/rshare.asmx")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, perso.stealthnet.webcache.AddPeerResponse] = seq match {
      case node: scala.xml.Node => Right(perso.stealthnet.webcache.AddPeerResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: perso.stealthnet.webcache.AddPeerResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }
  trait DefaultWebcacheGetPeerFormat extends scalaxb.XMLFormat[perso.stealthnet.webcache.GetPeer] with scalaxb.CanWriteChildNodes[perso.stealthnet.webcache.GetPeer] {
    val targetNamespace: Option[String] = Some("http://rshare.de/rshare.asmx")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, perso.stealthnet.webcache.GetPeer] = seq match {
      case node: scala.xml.Node => Right(perso.stealthnet.webcache.GetPeer())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: perso.stealthnet.webcache.GetPeer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }
  trait DefaultWebcacheGetPeerResponseFormat extends scalaxb.ElemNameParser[perso.stealthnet.webcache.GetPeerResponse] {
    val targetNamespace: Option[String] = Some("http://rshare.de/rshare.asmx")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[perso.stealthnet.webcache.GetPeerResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://rshare.de/rshare.asmx"), "GetPeerResult")) ^^
      { case p1 =>
      perso.stealthnet.webcache.GetPeerResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: perso.stealthnet.webcache.GetPeerResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetPeerResult map { scalaxb.toXML[String](_, Some("http://rshare.de/rshare.asmx"), Some("GetPeerResult"), __scope, false) } getOrElse {Nil})
  }
  trait DefaultWebcacheRemovePeerFormat extends scalaxb.XMLFormat[perso.stealthnet.webcache.RemovePeer] with scalaxb.CanWriteChildNodes[perso.stealthnet.webcache.RemovePeer] {
    val targetNamespace: Option[String] = Some("http://rshare.de/rshare.asmx")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, perso.stealthnet.webcache.RemovePeer] = seq match {
      case node: scala.xml.Node => Right(perso.stealthnet.webcache.RemovePeer())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: perso.stealthnet.webcache.RemovePeer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }
  trait DefaultWebcacheRemovePeerResponseFormat extends scalaxb.XMLFormat[perso.stealthnet.webcache.RemovePeerResponse] with scalaxb.CanWriteChildNodes[perso.stealthnet.webcache.RemovePeerResponse] {
    val targetNamespace: Option[String] = Some("http://rshare.de/rshare.asmx")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, perso.stealthnet.webcache.RemovePeerResponse] = seq match {
      case node: scala.xml.Node => Right(perso.stealthnet.webcache.RemovePeerResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: perso.stealthnet.webcache.RemovePeerResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }

  trait RshareSoap12Bindings { this: scalaxb.SoapClients =>
    lazy val targetNamespace: Option[String] = Some("http://rshare.de/rshare.asmx")
    lazy val service: perso.stealthnet.webcache.RshareSoap = new RshareSoap12Binding {}
    def baseAddress = new java.net.URI("http://rshare.de/rshare.asmx")

    trait RshareSoap12Binding extends perso.stealthnet.webcache.RshareSoap {
      def addPeer(port: Int): Either[scalaxb.Fault[Any], perso.stealthnet.webcache.AddPeerResponse] = 
        soapClient.requestResponse(scalaxb.toXML(perso.stealthnet.webcache.AddPeer(port), Some("http://rshare.de/rshare.asmx"), "AddPeer", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://rshare.de/rshare.asmx/AddPeer"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[perso.stealthnet.webcache.AddPeerResponse](body.headOption getOrElse {body}))
        }
      def getPeer(): Either[scalaxb.Fault[Any], perso.stealthnet.webcache.GetPeerResponse] = 
        soapClient.requestResponse(scalaxb.toXML(perso.stealthnet.webcache.GetPeer(), Some("http://rshare.de/rshare.asmx"), "GetPeer", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://rshare.de/rshare.asmx/GetPeer"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[perso.stealthnet.webcache.GetPeerResponse](body.headOption getOrElse {body}))
        }
      def removePeer(): Either[scalaxb.Fault[Any], perso.stealthnet.webcache.RemovePeerResponse] = 
        soapClient.requestResponse(scalaxb.toXML(perso.stealthnet.webcache.RemovePeer(), Some("http://rshare.de/rshare.asmx"), "RemovePeer", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://rshare.de/rshare.asmx/RemovePeer"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[perso.stealthnet.webcache.RemovePeerResponse](body.headOption getOrElse {body}))
        }
    }
  }



}

